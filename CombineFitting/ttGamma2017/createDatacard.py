from HiggsAnalysis.CombinedLimit.DatacardParser import *
from HiggsAnalysis.CombinedLimit.ModelTools import *
from HiggsAnalysis.CombinedLimit.ShapeTools import *
from HiggsAnalysis.CombinedLimit.PhysicsModel import *

from sys import exit
from optparse import OptionParser
parser = OptionParser()
addDatacardParserOptions(parser)
options,args = parser.parse_args()
options.bin = True # make a binary workspace

DC = Datacard()
MB = None

############## Setup the datacard (must be filled in) ###########################
	
DC.bins = 	['ChIso', 'M3', 'M30btag', 'M30photon'] # <type 'list'>
DC.obs = 	{'M30btag': -1.0, 'ChIso': -1.0, 'M3': -1.0, 'M30photon': -1.0} # <type 'dict'>
DC.processes = 	['isolatedTTGamma', 'isolatedTTbar', 'isolatedWGamma', 'isolatedZGamma', 'isolatedOther', 'nonPromptTTGamma', 'nonPromptTTbar', 'nonPromptZGamma', 'nonPromptOther', 'TTGamma', 'TTbar', 'WGamma', 'ZGamma', 'Other'] # <type 'list'>
DC.signals = 	['TTGamma', 'nonPromptTTGamma', 'isolatedTTGamma'] # <type 'list'>
DC.isSignal = 	{'isolatedZGamma': False, 'TTGamma': True, 'WGamma': False, 'ZGamma': False, 'isolatedTTbar': False, 'isolatedWGamma': False, 'nonPromptTTGamma': True, 'isolatedTTGamma': True, 'isolatedOther': False, 'nonPromptOther': False, 'nonPromptTTbar': False, 'TTbar': False, 'Other': False, 'nonPromptZGamma': False} # <type 'dict'>
DC.keyline = 	[('ChIso', 'isolatedTTGamma', True), ('ChIso', 'isolatedTTbar', False), ('ChIso', 'isolatedWGamma', False), ('ChIso', 'isolatedZGamma', False), ('ChIso', 'isolatedOther', False), ('ChIso', 'nonPromptTTGamma', True), ('ChIso', 'nonPromptTTbar', False), ('ChIso', 'nonPromptZGamma', False), ('ChIso', 'nonPromptOther', False), ('M3', 'isolatedTTGamma', True), ('M3', 'isolatedTTbar', False), ('M3', 'isolatedWGamma', False), ('M3', 'isolatedZGamma', False), ('M3', 'isolatedOther', False), ('M3', 'nonPromptTTGamma', True), ('M3', 'nonPromptTTbar', False), ('M3', 'nonPromptZGamma', False), ('M3', 'nonPromptOther', False), ('M30btag', 'isolatedTTGamma', True), ('M30btag', 'isolatedTTbar', False), ('M30btag', 'isolatedWGamma', False), ('M30btag', 'isolatedZGamma', False), ('M30btag', 'isolatedOther', False), ('M30btag', 'nonPromptTTGamma', True), ('M30btag', 'nonPromptTTbar', False), ('M30btag', 'nonPromptZGamma', False), ('M30btag', 'nonPromptOther', False), ('M30photon', 'TTGamma', True), ('M30photon', 'TTbar', False), ('M30photon', 'WGamma', False), ('M30photon', 'ZGamma', False), ('M30photon', 'Other', False)] # <type 'list'>
DC.exp = 	{'M30btag': {'isolatedZGamma': -1.0, 'isolatedTTbar': -1.0, 'isolatedWGamma': -1.0, 'nonPromptTTGamma': -1.0, 'isolatedTTGamma': -1.0, 'isolatedOther': -1.0, 'nonPromptOther': -1.0, 'nonPromptTTbar': -1.0, 'nonPromptZGamma': -1.0}, 'ChIso': {'isolatedZGamma': -1.0, 'isolatedTTbar': -1.0, 'isolatedWGamma': -1.0, 'nonPromptTTGamma': -1.0, 'isolatedTTGamma': -1.0, 'isolatedOther': -1.0, 'nonPromptOther': -1.0, 'nonPromptTTbar': -1.0, 'nonPromptZGamma': -1.0}, 'M3': {'isolatedZGamma': -1.0, 'isolatedTTbar': -1.0, 'isolatedWGamma': -1.0, 'nonPromptTTGamma': -1.0, 'isolatedTTGamma': -1.0, 'isolatedOther': -1.0, 'nonPromptOther': -1.0, 'nonPromptTTbar': -1.0, 'nonPromptZGamma': -1.0}, 'M30photon': {'WGamma': -1.0, 'TTbar': -1.0, 'ZGamma': -1.0, 'TTGamma': -1.0, 'Other': -1.0}} # <type 'dict'>
DC.systs = 	[('lumi', False, 'lnN', [], {'M30btag': {'isolatedZGamma': 1.025, 'isolatedTTbar': 1.025, 'isolatedWGamma': 1.025, 'nonPromptTTGamma': 1.025, 'isolatedTTGamma': 1.025, 'isolatedOther': 1.025, 'nonPromptOther': 1.025, 'nonPromptTTbar': 1.025, 'nonPromptZGamma': 1.025}, 'ChIso': {'isolatedZGamma': 1.025, 'isolatedTTbar': 1.025, 'isolatedWGamma': 1.025, 'nonPromptTTGamma': 1.025, 'isolatedTTGamma': 1.025, 'isolatedOther': 1.025, 'nonPromptOther': 1.025, 'nonPromptTTbar': 1.025, 'nonPromptZGamma': 1.025}, 'M3': {'isolatedZGamma': 1.025, 'isolatedTTbar': 1.025, 'isolatedWGamma': 1.025, 'nonPromptTTGamma': 1.025, 'isolatedTTGamma': 1.025, 'isolatedOther': 1.025, 'nonPromptOther': 1.025, 'nonPromptTTbar': 1.025, 'nonPromptZGamma': 1.025}, 'M30photon': {'WGamma': 1.025, 'TTbar': 1.025, 'ZGamma': 1.025, 'TTGamma': 1.025, 'Other': 1.025}}), ('BTagSF_b', False, 'shape', [], {'M30btag': {'isolatedZGamma': 0.0, 'isolatedTTbar': 0.0, 'isolatedWGamma': 0.0, 'nonPromptTTGamma': 0.0, 'isolatedTTGamma': 0.0, 'isolatedOther': 0.0, 'nonPromptOther': 0.0, 'nonPromptTTbar': 0.0, 'nonPromptZGamma': 0.0}, 'ChIso': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M3': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M30photon': {'WGamma': 1.0, 'TTbar': 1.0, 'ZGamma': 1.0, 'TTGamma': 1.0, 'Other': 1.0}}), ('BTagSF_l', False, 'shape', [], {'M30btag': {'isolatedZGamma': 0.0, 'isolatedTTbar': 0.0, 'isolatedWGamma': 0.0, 'nonPromptTTGamma': 0.0, 'isolatedTTGamma': 0.0, 'isolatedOther': 0.0, 'nonPromptOther': 0.0, 'nonPromptTTbar': 0.0, 'nonPromptZGamma': 0.0}, 'ChIso': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M3': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M30photon': {'WGamma': 1.0, 'TTbar': 1.0, 'ZGamma': 1.0, 'TTGamma': 1.0, 'Other': 1.0}}), ('PU', False, 'shape', [], {'M30btag': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'ChIso': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M3': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M30photon': {'WGamma': 1.0, 'TTbar': 1.0, 'ZGamma': 1.0, 'TTGamma': 1.0, 'Other': 1.0}}), ('MuEff', False, 'shape', [], {'M30btag': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'ChIso': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M3': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M30photon': {'WGamma': 1.0, 'TTbar': 1.0, 'ZGamma': 1.0, 'TTGamma': 1.0, 'Other': 1.0}}), ('PhoEff', False, 'shape', [], {'M30btag': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'ChIso': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M3': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M30photon': {'WGamma': 1.0, 'TTbar': 1.0, 'ZGamma': 1.0, 'TTGamma': 1.0, 'Other': 1.0}}), ('EleEff', False, 'shape', [], {'M30btag': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'ChIso': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M3': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 1.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 1.0}, 'M30photon': {'WGamma': 1.0, 'TTbar': 1.0, 'ZGamma': 1.0, 'TTGamma': 1.0, 'Other': 1.0}}), ('Q2', False, 'shape', [], {'M30btag': {'isolatedZGamma': 0.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 0.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 0.0, 'nonPromptOther': 0.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 0.0}, 'ChIso': {'isolatedZGamma': 0.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 0.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 0.0, 'nonPromptOther': 0.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 0.0}, 'M3': {'isolatedZGamma': 0.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 0.0, 'nonPromptTTGamma': 1.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 0.0, 'nonPromptOther': 0.0, 'nonPromptTTbar': 1.0, 'nonPromptZGamma': 0.0}, 'M30photon': {'WGamma': 0.0, 'TTbar': 1.0, 'ZGamma': 0.0, 'TTGamma': 1.0, 'Other': 0.0}}), ('misIDE', False, 'shape', [], {'M30btag': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 0.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 0.0, 'nonPromptTTbar': 0.0, 'nonPromptZGamma': 0.0}, 'ChIso': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 0.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 0.0, 'nonPromptTTbar': 0.0, 'nonPromptZGamma': 0.0}, 'M3': {'isolatedZGamma': 1.0, 'isolatedTTbar': 1.0, 'isolatedWGamma': 1.0, 'nonPromptTTGamma': 0.0, 'isolatedTTGamma': 1.0, 'isolatedOther': 1.0, 'nonPromptOther': 0.0, 'nonPromptTTbar': 0.0, 'nonPromptZGamma': 0.0}, 'M30photon': {'WGamma': 0.0, 'TTbar': 0.0, 'ZGamma': 0.0, 'TTGamma': 0.0, 'Other': 0.0}})] # <type 'list'>
DC.shapeMap = 	{'*': {'*': ['../../ttgamma_tightplots_ele_2016/ttgamma_Prefit.root', '$CHANNEL/$PROCESS/nominal', '$CHANNEL/$PROCESS/$SYSTEMATIC']}} # <type 'dict'>
DC.hasShapes = 	True # <type 'bool'>
DC.flatParamNuisances =  {} # <type 'dict'>
DC.rateParams =  {'M30btagANDnonPromptTTGamma': [[['nonPromptSF', '1', 0], '']], 'M30btagANDnonPromptTTbar': [[['nonPromptSF', '1', 0], '']], 'ChIsoANDnonPromptTTGamma': [[['nonPromptSF', '1', 0], '']], 'M30photonANDnonPromptZGamma': [[['nonPromptSF', '1', 0], '']], 'M3ANDnonPromptZGamma': [[['nonPromptSF', '1', 0], '']], 'ChIsoANDnonPromptZGamma': [[['nonPromptSF', '1', 0], '']], 'M30btagANDnonPromptZGamma': [[['nonPromptSF', '1', 0], '']], 'M30btagANDnonPromptOther': [[['nonPromptSF', '1', 0], '']], 'M3ANDnonPromptTTGamma': [[['nonPromptSF', '1', 0], '']], 'ChIsoANDnonPromptOther': [[['nonPromptSF', '1', 0], '']], 'M3ANDnonPromptTTbar': [[['nonPromptSF', '1', 0], '']], 'M3ANDnonPromptOther': [[['nonPromptSF', '1', 0], '']], 'M30photonANDnonPromptTTbar': [[['nonPromptSF', '1', 0], '']], 'ChIsoANDnonPromptTTbar': [[['nonPromptSF', '1', 0], '']], 'M30photonANDnonPromptOther': [[['nonPromptSF', '1', 0], '']], 'M30photonANDnonPromptTTGamma': [[['nonPromptSF', '1', 0], '']]} # <type 'dict'>
DC.extArgs = 	{} # <type 'dict'>
DC.rateParamsOrder 	=  set(['nonPromptSF']) # <type 'set'>
DC.frozenNuisances 	=  set([]) # <type 'set'>
DC.systematicsShapeMap =  {} # <type 'dict'>
DC.nuisanceEditLines 	=  [] # <type 'list'>
DC.binParFlags 	=  {'M30btag': (0.0, True, 1), 'ChIso': (0.0, True, 1), 'M3': (0.0, True, 1), 'M30photon': (0.0, True, 1)} # <type 'dict'>
DC.groups 	=  {} # <type 'dict'>
DC.discretes 	=  [] # <type 'list'>


###### User defined options #############################################

options.out 	 = "combine_workspace.root"  	# Output workspace name
options.fileName = "./" 			# Path to input ROOT files 
options.verbose  = "1" 				# Verbosity

##########################################################################

if DC.hasShapes:
    MB = ShapeBuilder(DC, options)
else:
    MB = CountingModelBuilder(DC, options)

# Set physics models 
MB.setPhysics(defaultModel)
MB.doModel()
