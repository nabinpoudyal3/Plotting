important notes from higgCombine.

1. Indeed you can have one-sided impacts when your POI (r) is close to a boundary. This is not necessarily a problem: if a negative signal strength is unphysical then anything pulling r<0 will be truncated and your impacts will be in one direction only.
2. Performing a likelihood scan with the multidimfit algo grid might help in visualise where the lower bound could be. 
3. We checked the link above in the warning and it suggests to set --cminDefaultMinimizerStrategy 0.
4. I think you have a bug in your implementation of the jes uncertainties on the wlnu process. I looked at the normalisation effect and it's extremely asymmetric - the "up" yields of the order 2% and the down yields of order 20% - this creates an NLL function with a rather odd shape and a non-pos-def covariance matrix at the minimum. Hopefully if you fix this it will be determined accurately again.



  -d [ --datacard ] arg                 Datacard file (can also be specified directly without the -d or --datacard)
  -M [ --method ] arg (=AsymptoticLimits)
                                        Method to extract upper limit. 
                                        Supported methods are: 
                                        AsymptoticLimits, BayesianSimple, 
                                        BayesianToyMC, ChannelCompatibilityChec
                                        k, FeldmanCousins, FitDiagnostics, 
                                        GenerateOnly, GoodnessOfFit, HybridNew,
                                        MarkovChainMC, MultiDimFit, 
                                        Significance
  -v [ --verbose ] arg (=0)             Verbosity level (-1 = very quiet; 0 = 
                                        quiet, 1 = verbose, 2+ = debug)
  -h [ --help ]                         Produce help message

Common statistics options:
  -C [ --cl ] arg (=0.949999988)        Confidence Level
  --rMin arg                            Override minimum value for signal 
                                        strength (default is 0)
  --rMax arg                            Override maximum value for signal 
                                        strength (default is 20)
  --prior arg (=flat)                   Prior to use, for methods that require 
                                        it and if it's not already in the input
                                        file: 'flat' (default), '1/sqrt(r)'
  --significance                        Compute significance instead of upper 
                                        limit (works only for some methods)
  --lowerLimit                          Compute the lower limit instead of the 
                                        upper limit (works only for some 
                                        methods)
  --hintStatOnly                        Ignore systematics when computing the 
                                        hint
  --toysNoSystematics                   Generate all toys with the central 
                                        value of the nuisance parameters, 
                                        without fluctuating them
  --toysFrequentist                     Generate all toys in the frequentist 
                                        way. Note that this affects the toys 
                                        generated by option '-t' that happen in
                                        the main loop, not the ones within the 
                                        Hybrid(New) algorithm.
  --expectSignal arg (=0)               If set to non-zero, generate *signal* 
                                        toys instead of background ones, with 
                                        the specified signal strength.
  --expectSignalMass arg (=-99)         If set to non-zero, generate *signal* 
                                        toys instead of background ones, with 
                                        the specified mass.
  -U [ --unbinned ]                     Generate unbinned datasets instead of 
                                        binned ones (works only for extended 
                                        pdfs)
  --generateBinnedWorkaround            Make binned datasets generating 
                                        unbinned ones and then binnning them. 
                                        Workaround for a bug in RooFit.
  --setParameters arg                   Set the values of relevant physics 
                                        model parameters. Give a comma 
                                        separated list of parameter value 
                                        assignments. Example: CV=1.0,CF=1.0
  --setParameterRanges arg              Set the range of relevant physics model
                                        parameters. Give a colon separated list
                                        of parameter ranges. Example: 
                                        CV=0.0,2.0:CF=0.0,5.0
  --defineBackgroundOnlyModelParameters arg
                                        If no background only (null) model is 
                                        explicitly provided in physics model, 
                                        one will be defined as these values of 
                                        the POIs (default is r=0)
  --redefineSignalPOIs arg              Redefines the POIs to be this 
                                        comma-separated list of variables from 
                                        the workspace.
  --freezeParameters arg                Set as constant all these parameters. 
                                        use --freezeParameters 
                                        allConstrainedNuisances to freeze all 
                                        constrained nuisance parameters (i.e 
                                        doesn't include rateParams etc)
  --freezeNuisanceGroups arg            Set as constant all these groups of 
                                        nuisance parameters.
  --freezeWithAttributes arg            Set as constant all variables carrying 
                                        one of these attribute strings.
  -t [ --toys ] arg (=0)                Number of Toy MC extractions
  -s [ --seed ] arg (=123456)           Toy MC random seed
  -H [ --hintMethod ] arg               Run first this method to provide a hint
                                        on the result

Common input-output options:
  --saveWorkspace                       Save workspace to output root file
  -w [ --workspaceName ] arg (=w)       Workspace name, when reading it from or
                                        writing it to a rootfile.
  --snapshotName arg                    Default snapshot name for pre-fit 
                                        snapshot for reading or writing to 
                                        workspace
  --modelConfigName arg (=ModelConfig)  ModelConfig name, when reading it from 
                                        or writing it to a rootfile.
  --modelConfigNameB arg (=%s_bonly)    Name of the ModelConfig for b-only 
                                        hypothesis.
                                        If not present, it will be made from 
                                        the singal model taking zero signal 
                                        strength.
                                        A '%s' in the name will be replaced 
                                        with the modelConfigName.
  --bypassFrequentistFit                Skip actual minimization for 
                                        constructing frequentist toys (eg 
                                        because loaded snapshot already 
                                        corresponds to desired postfit)
  --overrideSnapshotMass                Override MH loaded from a snapshot with
                                        the one passed on the command line
  -V [ --validateModel ]                Perform some sanity checks on the model
                                        and abort if they fail.
  --saveToys                            Save results of toy MC in output file
  --floatAllNuisances arg (=0)          Make all nuisance parameters floating
  --floatParameters arg                 Set to floating these parameters (note 
                                        freeze will take priority over float)
  --freezeAllGlobalObs arg (=1)         Make all global observables constant
  -n [ --name ] arg (=Test)             Name of the job, affects the name of 
                                        the output tree
  -m [ --mass ] arg (=120)              Higgs mass to store in the output tree
  -D [ --dataset ] arg (=data_obs)      Name of the dataset for observed limit
  --toysFile arg                        Read toy mc or other intermediate 
                                        results from this file

Cascade Minimizer options:
  --cminPoiOnlyFit                      Do first a fit floating only the 
                                        parameter of interest
  --cminPreScan                         Do a scan before first minimization
  --cminPreFit arg (=0)                 if set to a value N > 0, it will 
                                        perform a pre-fit with strategy (N-1) 
                                        with frozen constrained nuisance 
                                        parameters.
  --cminApproxPreFitTolerance arg (=0)  If non-zero, do first a pre-fit with 
                                        this tolerance (or 10 times the final 
                                        tolerance, whichever is largest)
  --cminApproxPreFitStrategy arg (=0)   Strategy to use in the pre-fit
  --cminSingleNuisFit                   Do first a minimization of each 
                                        nuisance parameter individually
  --cminFallbackAlgo arg                Fallback algorithms if the default 
                                        minimizer fails (can use multiple 
                                        ones). Syntax is algo[,subalgo][,strate
                                        gy][:tolerance]
  --cminSetZeroPoint arg (=1)           Change the reference point of the NLL 
                                        to be zero during minimization
  --cminOldRobustMinimize arg (=0)      Use the old 'robustMinimize' logic in 
                                        addition to the cascade (for debug 
                                        only)
  --cminInitialHesse arg (=0)           Call Hesse before the minimization
  --cminFinalHesse arg (=0)             Call Hesse after the minimization
  --cminDefaultMinimizerType arg (=Minuit2)
                                        Set the default minimizer Type
  --cminDefaultMinimizerAlgo arg (=Migrad)
                                        Set the default minimizer Algo
  --cminDefaultMinimizerTolerance arg (=0.10000000000000001)
                                        Set the default minimizer Tolerance
  --cminDefaultMinimizerPrecision arg (=-1)
                                        Set the default minimizer precision
  --cminDefaultMinimizerStrategy arg (=1)
                                        Set the default minimizer (initial) 
                                        strategy
  --cminRunAllDiscreteCombinations      Run all combinations for discrete 
                                        nuisances
  --cminDiscreteMinTol arg (=0.001)     tolerance on min NLL for discrete 
                                        combination iterations
  --cminM2StorageLevel arg (=0)         storage level for minuit2 (0 = don't 
                                        store intermediate covariances, 1 = 
                                        store them)

Common miscellaneous options:
  --optimizeSimPdf arg (=1)             Turn on special optimizations of 
                                        RooSimultaneous. On by default, you can
                                        turn it off if it doesn't work for your
                                        workspace.
  --noMCbonly arg (=0)                  Don't create a background-only 
                                        modelConfig
  --noDefaultPrior arg (=0)             Don't create a default uniform prior
  --rebuildSimPdf arg (=0)              Rebuild simultaneous pdf from scratch 
                                        to make sure constraints are correct 
                                        (not needed in CMS workspaces)
  --compile                             Compile expressions instead of 
                                        interpreting them
  --tempDir arg (=0)                    Run the program from a temporary 
                                        directory (automatically on for text 
                                        datacards or if 'compile' is activated)
  --guessGenMode                        Guess if to generate binned or unbinned
                                        based on dataset
  --genBinnedChannels arg               Flag the given channels to be generated
                                        binned (irrespectively of how they were
                                        flagged at workspace creation)
  --genUnbinnedChannels arg             Flag the given channels to be generated
                                        unbinned (irrespectively of how they 
                                        were flagged at workspace creation)
  --text2workspace arg                  Pass along options to text2workspace 
                                        (default = none)
  --trackParameters arg                 Keep track of parameters in workspace, 
                                        also accepts regexp with syntax 
                                        'rgx{<my regexp>}' (default = none)
  --igpMem                              Setup support for memory profiling 
                                        using IgProf
  --perfCounters                        Dump performance counters at end of job
  -L [ --LoadLibrary ] arg              Load library through 
                                        gSystem->Load(...). Can specify 
                                        multiple libraries using this option 
                                        multiple times
  --keyword-value arg                   Set keyword values with 'WORD=VALUE', 
                                        will replace $WORD with VALUE in 
                                        datacards. Filename will also be 
                                        extended with 'WORDVALUE'. Can specify 
                                        multiple times
  --X-rtd arg                           Define some constants to be used at 
                                        runtime (for debugging purposes). The 
                                        syntax is --X-rtd identifier[=value], 
                                        where value is an integer and defaults 
                                        to 1. Can specify multiple times
  --X-fpeMask arg                       Set FPE mask: 1=NaN, 2=Div0, 4=Overfl, 
                                        8=Underf, 16=Inexact; 7=default
FitDiagnostics specific options:
  --preFitValue arg (=1)                Value of signal strength pre-fit, also 
                                        used for pre-fit plots, normalisations 
                                        and uncertainty calculations (note this
                                        overrides --expectSignal for these 
                                        features)
  --do95 arg (=0)                       Compute also 2-sigma interval from 
                                        delta(nll) = 1.92 instead of 0.5
  --robustFit arg (=0)                  Search manually for 1 and 2 sigma bands
                                        instead of using Minos
  --maxFailedSteps arg (=5)             How many failed steps to retry before 
                                        giving up
  --stepSize arg (=0.100000001)         Step size for robust fits (multiplier 
                                        of the range)
  --setRobustFitAlgo arg                Choice of minimizer (Minuit vs Minuit2)
                                        for profiling in robust fits
  --setRobustFitStrategy arg (=0)       Stragegy for minimizer for profiling in
                                        robust fits
  --setRobustFitTolerance arg (=0.100000001)
                                        Tolerance for minimizer for profiling 
                                        in robust fits
  --setCrossingTolerance arg (=9.99999975e-05)
                                        Tolerance for finding the NLL crossing 
                                        in robust fits
  --profilingMode arg (=all)            What to profile when computing 
                                        uncertainties: all, none (at least for 
                                        now).
  --saveNLL                             Save the negative log-likelihood at the
                                        minimum in the output tree (note: value
                                        is relative to the pre-fit state)
  --keepFailures                        Save the results even if the fit is 
                                        declared as failed (for NLL studies)
  --protectUnbinnedChannels             Protect PDF from going negative in 
                                        unbinned channels
  --autoBoundsPOIs arg                  Adjust bounds for the POIs if they end 
                                        up close to the boundary. Can be a list
                                        of POIs, or "*" to get all
  --autoMaxPOIs arg                     Adjust maxima for the POIs if they end 
                                        up close to the boundary. Can be a list
                                        of POIs, or "*" to get all
  --forceRecreateNLL                    Always recreate NLL when running on 
                                        multiple toys rather than re-using nll 
                                        with new dataset
  --minos arg (=poi)                    Compute MINOS errors for: 'none', 
                                        'poi', 'all'
  --noErrors                            Don't compute uncertainties on the best
                                        fit value. Best if using toys (-t N) to
                                        evaluate distributions of results
  --out arg (=.)                        Directory to put the diagnostics output
                                        file in
  --plots                               Make pre/post-fit RooPlots of 1D 
                                        distributions of observables and fitted
                                        models
  --rebinFactor arg (=1)                Rebin by this factor before plotting 
                                        (does not affect fitting!)
  --signalPdfNames arg (=shapeSig*)     Names of signal pdfs in plots 
                                        (separated by ,)
  --backgroundPdfNames arg (=shapeBkg*) Names of background pdfs in plots 
                                        (separated by ',')
  --saveNormalizations                  Save post-fit normalizations RooArgSet 
                                        (single toy only)
  --savePredictionsPerToy               Save post-fit normalizations and shapes
                                        per toy
  --oldNormNames                        Name the normalizations as in the 
                                        workspace, and not as channel/process
  --saveShapes                          Save pre and post-fit distributions as 
                                        TH1 in fitDiagnostics.root
  --saveWithUncertainties               Save also pre/post-fit uncertainties on
                                        the shapes and normalizations (from 
                                        resampling the covariance matrix)
  --saveOverallShapes                   Save total shapes (and covariance if 
                                        used with --saveWithUncertainties), ie 
                                        will produce TH1 (TH2) merging bins 
                                        across all channels
  --numToysForShapes arg (=200)         Choose number of toys for re-sampling 
                                        of the covariance (for shapes with 
                                        uncertainties)
  --filterString arg                    Filter to search for when making 
                                        covariance and shapes
  --justFit                             Just do the S+B fit, don't do the 
                                        B-only one, don't save output file
  --robustHesse arg (=0)                Use a more robust calculation of the 
                                        hessian/covariance matrix
  --skipBOnlyFit                        Skip the B-only fit (do only the S+B 
                                        fit)
  --initFromBonly                       Use the values of the nuisance 
                                        parameters from the background only fit
                                        as the starting point for the s+b fit. 
                                        Can help fit convergence
  --customStartingPoint                 Don't set the first POI to 0 for the 
                                        background-only fit. Instead if using 
                                        this option, the parameter will be 
                                        fixed to its default value, which can 
                                        be set with the --setParameters option.
  --ignoreCovWarning                    Override the default behaviour of 
                                        saveWithUncertainties being ignored if 
                                        the covariance matrix is not accurate.
MultiDimFit specific options:
  --preFitValue arg (=1)                Value of signal strength pre-fit, also 
                                        used for pre-fit plots, normalisations 
                                        and uncertainty calculations (note this
                                        overrides --expectSignal for these 
                                        features)
  --do95 arg (=0)                       Compute also 2-sigma interval from 
                                        delta(nll) = 1.92 instead of 0.5
  --robustFit arg (=0)                  Search manually for 1 and 2 sigma bands
                                        instead of using Minos
  --maxFailedSteps arg (=5)             How many failed steps to retry before 
                                        giving up
  --stepSize arg (=0.100000001)         Step size for robust fits (multiplier 
                                        of the range)
  --setRobustFitAlgo arg                Choice of minimizer (Minuit vs Minuit2)
                                        for profiling in robust fits
  --setRobustFitStrategy arg (=0)       Stragegy for minimizer for profiling in
                                        robust fits
  --setRobustFitTolerance arg (=0.100000001)
                                        Tolerance for minimizer for profiling 
                                        in robust fits
  --setCrossingTolerance arg (=9.99999975e-05)
                                        Tolerance for finding the NLL crossing 
                                        in robust fits
  --profilingMode arg (=all)            What to profile when computing 
                                        uncertainties: all, none (at least for 
                                        now).
  --saveNLL                             Save the negative log-likelihood at the
                                        minimum in the output tree (note: value
                                        is relative to the pre-fit state)
  --keepFailures                        Save the results even if the fit is 
                                        declared as failed (for NLL studies)
  --protectUnbinnedChannels             Protect PDF from going negative in 
                                        unbinned channels
  --autoBoundsPOIs arg                  Adjust bounds for the POIs if they end 
                                        up close to the boundary. Can be a list
                                        of POIs, or "*" to get all
  --autoMaxPOIs arg                     Adjust maxima for the POIs if they end 
                                        up close to the boundary. Can be a list
                                        of POIs, or "*" to get all
  --forceRecreateNLL                    Always recreate NLL when running on 
                                        multiple toys rather than re-using nll 
                                        with new dataset
  --algo arg (=none)                    Algorithm to compute uncertainties
  -P [ --parameters ] arg               Parameters to fit/scan (default = all 
                                        parameters of interest)
  --floatOtherPOIs arg (=0)             POIs other than the selected ones will 
                                        be kept freely floating (1) or fixed 
                                        (0, default)
  --squareDistPoiStep                   POI step size based on distance from 
                                        midpoint (max-min)/2 rather than linear
  --skipInitialFit                      Skip initial fit (save time if snapshot
                                        is loaded from previous fit)
  --points arg (=50)                    Points to use for grid or contour scans
  --firstPoint arg (=0)                 First point to use
  --lastPoint arg (=4294967295)         Last point to use
  --autoRange arg (=-1)                 Set to any X >= 0 to do the scan in the
                                        +/- X sigma range (where the sigma is 
                                        from the initial fit, so it may be 
                                        fairly approximate)
  --fixedPointPOIs arg                  Parameter space point for --algo=fixed
  --centeredRange arg (=-1)             Set to any X >= 0 to do the scan in the
                                        +/- X range centered on the nominal 
                                        value
  --fastScan                            Do a fast scan, evaluating the 
                                        likelihood without profiling it.
  --maxDeltaNLLForProf arg (=200)       Last point to use
  --saveSpecifiedNuis arg               Save specified parameters (default = 
                                        none)
  --saveSpecifiedFunc arg               Save specified function values (default
                                        = none)
  --saveSpecifiedIndex arg              Save specified indexes/discretes 
                                        (default = none)
  --saveInactivePOI arg (=0)            Save inactive POIs in output (1) or not
                                        (0, default)
  --startFromPreFit arg (=0)            Start each point of the likelihood scan
                                        from the pre-fit values
  --alignEdges arg (=0)                 Align the grid points such that the 
                                        endpoints of the ranges are included
  --setParametersForGrid arg            Set the values of relevant physics 
                                        model parameters. Give a comma 
                                        separated list of parameter value 
                                        assignments. Example: CV=1.0,CF=1.0
  --saveFitResult                       Save RooFitResult to muiltidimfit.root
  --robustHesse arg (=0)                Use a more robust calculation of the 
                                        hessian/covariance matrix
  --robustHesseLoad arg                 Load the pre-calculated Hessian
  --robustHesseSave arg                 Save the calculated Hessian

GoodnessOfFit specific options:
  --algorithm arg                Goodness of fit algorithm. Supported 
                                 algorithms are 'saturated', 'KS' and 'AD'.
  --setParametersForFit arg      Set parameters values for the saturated model 
                                 fitting step
  --setParametersForEval arg     Set parameter values for the saturated model 
                                 NLL eval step
  --fixedSignalStrength arg (=0) Compute the goodness of fit for a fixed signal
                                 strength. If not specified, it's left floating
  --plots                        Make plots containing information of the 
                                 computation of the Anderson-Darling or 
                                 Kolmogorov-Smirnov test statistic



ChannelCompatibilityCheck specific options:
  --preFitValue arg (=1)                Value of signal strength pre-fit, also 
                                        used for pre-fit plots, normalisations 
                                        and uncertainty calculations (note this
                                        overrides --expectSignal for these 
                                        features)
  --do95 arg (=0)                       Compute also 2-sigma interval from 
                                        delta(nll) = 1.92 instead of 0.5
  --robustFit arg (=0)                  Search manually for 1 and 2 sigma bands
                                        instead of using Minos
  --maxFailedSteps arg (=5)             How many failed steps to retry before 
                                        giving up
  --stepSize arg (=0.100000001)         Step size for robust fits (multiplier 
                                        of the range)
  --setRobustFitAlgo arg                Choice of minimizer (Minuit vs Minuit2)
                                        for profiling in robust fits
  --setRobustFitStrategy arg (=0)       Stragegy for minimizer for profiling in
                                        robust fits
  --setRobustFitTolerance arg (=0.100000001)
                                        Tolerance for minimizer for profiling 
                                        in robust fits
  --setCrossingTolerance arg (=9.99999975e-05)
                                        Tolerance for finding the NLL crossing 
                                        in robust fits
  --profilingMode arg (=all)            What to profile when computing 
                                        uncertainties: all, none (at least for 
                                        now).
  --saveNLL                             Save the negative log-likelihood at the
                                        minimum in the output tree (note: value
                                        is relative to the pre-fit state)
  --keepFailures                        Save the results even if the fit is 
                                        declared as failed (for NLL studies)
  --protectUnbinnedChannels             Protect PDF from going negative in 
                                        unbinned channels
  --autoBoundsPOIs arg                  Adjust bounds for the POIs if they end 
                                        up close to the boundary. Can be a list
                                        of POIs, or "*" to get all
  --autoMaxPOIs arg                     Adjust maxima for the POIs if they end 
                                        up close to the boundary. Can be a list
                                        of POIs, or "*" to get all
  --forceRecreateNLL                    Always recreate NLL when running on 
                                        multiple toys rather than re-using nll 
                                        with new dataset
  --fixedSignalStrength arg (=0)        Compute the compatibility for a fixed 
                                        signal strength. If not specified, it's
                                        left floating
  --saveFitResult                       Save fit results in output file
  -g [ --group ] arg                    Group together channels that contain a 
                                        given name. Can be used multiple times.
  --runMinos arg (=1)                   Compute also uncertainties using 
                                        profile likeilhood (MINOS or robust 
                                        variants of it)


usage: combineTool.py [-M METHOD]
                      [--job-mode {interactive,script,lxbatch,SGE,condor,crab3}]
                      [--prefix-file PREFIX_FILE] [--task-name TASK_NAME]
                      [--parallel PARALLEL] [--merge MERGE] [--dry-run]
                      [--sub-opts SUB_OPTS] [--memory MEMORY]
                      [--crab-area CRAB_AREA] [--custom-crab CUSTOM_CRAB]
                      [--crab-extra-files CRAB_EXTRA_FILES [CRAB_EXTRA_FILES ...]]
                      [--pre-cmd PRE_CMD]
                      [--custom-crab-post CUSTOM_CRAB_POST] [-m MASS]
                      [--points POINTS] [--singlePoint SINGLEPOINT] [-s SEED]
                      [-d [DATACARD [DATACARD ...]]] [--name NAME]
                      [--setParameterRanges SETPARAMETERRANGES]
                      [--opts OPTS [OPTS ...]] [--there]
                      [--split-points SPLIT_POINTS] [--boundlist BOUNDLIST]
                      [--generate [GENERATE [GENERATE ...]]] [-h]

Available methods:

  EnhancedCombine      : combine pass-through with special treatment for some options [DEFAULT]
  T2W                  : Run text2workspace.py on multiple cards or directories
  PrintWorkspace       : Load a Workspace and call Print()
  ModifyDataSet        : Change the name of a dataset in an existing workspace
  Impacts              : Calculate nuisance parameter impacts
  ImpactsFromScans     : Calculate nuisance parameter impacts
  CollectLimits        : Aggregate limit output from combine
  CollectGoodnessOfFit : Aggregate Goodness of Fit output from fit and toys
  CovMatrix            : Build a fit covariance matrix from scan results
  PrintFit             : Print the output of MultimDitFit
  AsymptoticGrid       : Calculate asymptotic limits on parameter grids
  HybridNewGrid        : Calculate toy-based limits on parameter grids
  FastScan             : Calculate nuisance parameter impacts
  TaylorExpand         : Calculate nuisance parameter impacts

optional arguments:
  -M METHOD, --method METHOD
  -h, --help

job options:
  options for creating, running and submitting jobs

  --job-mode {interactive,script,lxbatch,SGE,condor,crab3}
                        Task execution mode
  --prefix-file PREFIX_FILE
                        Path to file containing job prefix
  --task-name TASK_NAME
                        Task name, used for job script and log filenames for
                        batch system tasks
  --parallel PARALLEL   Number of jobs to run in parallel [only affects
                        interactive job-mode]
  --merge MERGE         Number of jobs to run in a single script [only affects
                        batch submission]
  --dry-run             Print commands to the screen but do not run them
  --sub-opts SUB_OPTS   Options for batch/crab submission
  --memory MEMORY       Request memory for job [MB]
  --crab-area CRAB_AREA
                        crab working area
  --custom-crab CUSTOM_CRAB
                        python file containing a function with name signature
                        "custom_crab(config)" that can be used to modify the
                        default crab configuration
  --crab-extra-files CRAB_EXTRA_FILES [CRAB_EXTRA_FILES ...]
                        Extra files that should be shipped to crab
  --pre-cmd PRE_CMD     Prefix the call to combine with this string
  --custom-crab-post CUSTOM_CRAB_POST
                        txt file containing command lines that can be used in
                        the crab job script instead of the defaults.

EnhancedCombine options:
  options specific to this method

  --opts OPTS [OPTS ...]
                        Add preset combine option groups
  --there               Run combine in the same directory as the workspace
  --split-points SPLIT_POINTS
                        When used in conjunction with --points will create
                        multiple combine calls that each run at most the
                        number of points specified here.
  --boundlist BOUNDLIST
                        Name of json-file which contains the ranges of
                        physical parameters depending on the given mass and
                        given physics model
  --generate [GENERATE [GENERATE ...]]
                        Generate sets of options

combine options:
  standard combine options that will be re-interpreted

  -m MASS, --mass MASS  Supports range strings for multiple masses, e.g.
                        "120:130:5,140 will produce three combine calls with
                        mass values of 120, 125, 130 and 140"
  --points POINTS       For use with "-M MultiDimFit --algo grid" to split
                        scan points into separate jobs
  --singlePoint SINGLEPOINT
                        Supports range strings for multiple points to test,
                        uses the same format as the --mass argument
  -s SEED, --seed SEED  Supports range strings for multiple RNG seeds, uses
                        the same format as the --mass argument
  -d [DATACARD [DATACARD ...]], --datacard [DATACARD [DATACARD ...]]
                        Operate on multiple datacards
  --name NAME, -n NAME  Name used to label the combine output file, can be
                        modified by other options
  --setParameterRanges SETPARAMETERRANGES
                        Some other options will modify or add to the list of
                        parameter ranges


Impacts options:
  options specific to this method

  --named PARAM1,PARAM2,...
                        By default the list of nuisance parameters will be
                        loaded from the input workspace. Use this option to
                        specify a different list
  --exclude PARAM1,PARAM2,...
                        Skip these nuisances. Also accepts regexp with syntax
                        'rgx{<my regexp>}'
  --doInitialFit        Find the crossings of all the POIs. Must have the
                        output from this before running with --doFits
  --splitInitial        In the initial fits generate separate jobs for each
                        POI
  --doFits              Actually run the fits for the nuisance parameter
                        impacts, otherwise just looks for the results
  --allPars             Run the impacts for all free parameters of the model,
                        not just those listed as nuisance parameters
  --output OUTPUT, -o OUTPUT
                        write output json to a file
  --approx {hesse,robust}
                        Calculate impacts using the covariance matrix instead


CovMatrix options:
  options specific to this method

  -i INPUT [INPUT ...], --input INPUT [INPUT ...]
                        The input file containing the MultiDimFit singles mode
                        output
  -o OUTPUT, --output OUTPUT
                        The output name in the format file:prefix
  -P POIS, --POIs POIS  The params that were scanned (in scan order)
  --POIs-from-set POIS_FROM_SET
                        Extract from file:workspace:set instead
  --compare COMPARE     Compare to RooFitResult

FastScan options:
  options specific to this method

  -w WORKSPACE, --workspace WORKSPACE
  -d DATA, --data DATA
  -f FITRES, --fitres FITRES
  --match MATCH
  --no-match NO_MATCH
  -o OUTPUT, --output OUTPUT
  -p POINTS, --points POINTS



